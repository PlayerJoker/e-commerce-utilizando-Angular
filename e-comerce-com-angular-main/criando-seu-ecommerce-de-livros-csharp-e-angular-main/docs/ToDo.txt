
DIO - Projeto entregue:

Pesquisas / Demanda
-------------------
- Achar o exemplo que mostra Upload na API c/ Swagger;
- 

======================================================
Analisar possibilidade...

	- Impacto Radical no Frontend:
	------------------------------
	x. Separar Category de Product;
	x. Mudar tipo do Id, de string para Guid;
	x. Implementar a EntityBase;
	x. Implementar a Auditoria de registro;
	---------------------------------------
======================================================

ToDo:

	1. Mudar o Banco de Dados de InMomore para localDb; ( Ok )
	2. Implementar a semente de Dados Iniciais, através da Program.cs com Extension Method; ( Ok )
		2.a. Gerar a primeira Migration; ( Ok )
	3. Retirar qualquer referencia ao DbContext da Controller de Product; ( Ok )
		3.a. Desacoplar, utilizando DI para obter a IoC; ( Ok )
	4. Instalar, Configurar e Registrar o AutoMapper; ( Ok )
		4.a. Utilizar as DTOs nas Actions; ( Ok )
	5. Criar o ProductMapping depois de gerar a Migration; ( Ok )
		5.a. Configurar o OnModelCreating (varchar(80)) e AplyConfiguration automático; ( Ok )
	6. Documentar a API com Swagger; ( Ok )
		6.a. Não esquecer de por o 'swagger' no lauchUrl; ( Ok )
	7. Versionar a API; ( Ok )
		7.a. Manter na v.1.0 a Controller com o DbContext e manter tudo que puder do projeto original;
		7.b. ProductController modificada com uso do Repository e IoW Patterns mais o AutoMapper e DTOs; ( Ok )

	8. Implementar Put e Delete; ( Ok )

	9. Manter o modelo original na v1 do projeto (com DbContext) - Apenas GetAll e GetById;
	
	10. Instalar, Configurar e Registrar o FluentValidation;
		9.a. Criar o ProductValidation e o DomainService;
		9.b. Validar com BaseService e Notification Pattern;

	11. Upload do Arquivo de Imagem do Product;
		10.a. Fazer isso também no Swagger;
		
	12. Atualizar o README com imagens; ( Ok ) 
		
		